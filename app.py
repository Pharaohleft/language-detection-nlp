# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lO5usVHtxMcGAP3HW49WtQKDH4l6cf5A
"""

import streamlit as st
import pandas as pd
import re
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.preprocessing import LabelEncoder
from sklearn.naive_bayes import MultinomialNB
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

st.title("üåê Language Detection App")
st.write("Upload your dataset and predict the language of your text samples!")

# File uploader
uploaded_file = st.file_uploader("Upload your CSV file", type="csv")

if uploaded_file is not None:
    data = pd.read_csv(uploaded_file)
    st.write("### Data Preview", data.head())

    # Preprocess
    X = data["Text"]
    y = data["Language"]

    le = LabelEncoder()
    y = le.fit_transform(y)

    data_list = []
    for text in X:
        text = re.sub(r'[!@#$(),n"%^*?:;~`0-9]', ' ', text)
        text = re.sub(r'\[|\]', ' ', text)
        text = text.lower()
        data_list.append(text)

    cv = CountVectorizer()
    X_vect = cv.fit_transform(data_list).toarray()

    x_train, x_test, y_train, y_test = train_test_split(X_vect, y, test_size=0.20)
    model = MultinomialNB()
    model.fit(x_train, y_train)
    y_pred = model.predict(x_test)

    acc = accuracy_score(y_test, y_pred)
    st.write(f"‚úÖ **Model Accuracy:** {acc:.2f}")

    cm = confusion_matrix(y_test, y_pred)

    # Show confusion matrix heatmap
    st.write("### Confusion Matrix")
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", ax=ax)
    st.pyplot(fig)

    # Prediction box
    st.write("### Test Your Own Sentence")
    user_input = st.text_input("Enter your sentence here:")
    if user_input:
        user_input_clean = re.sub(r'[!@#$(),n"%^*?:;~`0-9]', ' ', user_input)
        user_input_clean = re.sub(r'\[|\]', ' ', user_input_clean)
        user_input_clean = user_input_clean.lower()
        user_vect = cv.transform([user_input_clean]).toarray()
        prediction = model.predict(user_vect)
        predicted_language = le.inverse_transform(prediction)
        st.write("üåü Predicted language:", predicted_language[0])

